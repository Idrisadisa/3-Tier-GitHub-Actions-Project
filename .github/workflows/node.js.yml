name: Node.js CICD  

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  compile:
    runs-on: Agent-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'   # adjust version as per your Jenkins setup

      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: Agent-1
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gitleaks Setup
        uses: gitleaks/gitleaks-action@v2

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  trivy_fs_scan:
    runs-on: Agent-1
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: Agent-1
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client        # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: Agent-1
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api           # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api  
          push: true
          tags: idrisadisa/backend:latest
          file: ./api/Dockerfile

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: docker.io/${{ vars.DOCKERHUB_USERNAME }}/frontend:latest
          file: ./client/Dockerfile

  trivy_image_scan:
    runs-on: Agent-1
    needs: build_frontend_docker_image_and_push   # or whatever job built/pushed your image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy image scan for backend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: idrisadisa/backend:latest
          format: table
          exit-code: '0'                 
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Trivy image scan for frontend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: idrisadisa/frontend:latest
          format: table
          exit-code: '0'              
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
  deploy_to_kubernetes:
    runs-on: Agent-1
    needs: trivy_image_scan
    env:
      AWS_REGION: us-east-1
      CLUSTER_NAME: idris-powerdevops-cluster
      KNS: prod
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install AWS CLI v2 (idempotent)
      run: |
        set -euo pipefail
        if ! command -v aws >/dev/null 2>&1; then
          sudo apt-get update -y
          sudo apt-get install -y unzip
          tmpdir="$(mktemp -d)"
          curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "$tmpdir/awscliv2.zip"
          unzip -q -o "$tmpdir/awscliv2.zip" -d "$tmpdir"
          sudo "$tmpdir/aws/install" --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
        fi
        aws --version

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: v1.30.3

    - name: Configure kubeconfig
      env:
        AWS_REGION: us-east-1
        CLUSTER_NAME: idris-powerdevops-cluster
      run: |
        set -euo pipefail
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        export AWS_PAGER=""   
        rm -rf "$HOME/.kube/config"
        mkdir -p "$HOME/.kube"
        aws --version
        aws sts get-caller-identity

        aws eks update-kubeconfig \
        --region "$AWS_REGION" \
        --name "$CLUSTER_NAME" \
         --alias powerdevops \
        --kubeconfig "$HOME/.kube/config"
    
        kubectl config current-context


    - name: Ensure namespace exists
      run: kubectl create namespace "$KNS" --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to EKS
      run: |
        set -euo pipefail
        kubectl apply -f k8s-prod/sc.yaml
        kubectl apply -f k8s-prod/mysql.yaml
        kubectl apply -f k8s-prod/backend.yaml
        kubectl apply -f k8s-prod/frontend.yaml
        # Remove this if the file doesn't exist:
        # kubectl apply -f k8s-prod/ci.yaml
        kubectl apply -f k8s-prod/ingress.yaml

        kubectl -n "$KNS" get pods -o wide
        kubectl -n "$KNS" get svc
